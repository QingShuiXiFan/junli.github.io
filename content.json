{"meta":{"title":"Jun Li's Blog","subtitle":"","description":"","author":"Jun Li","url":"http://qingshuixifan.github.io","root":"/"},"pages":[{"title":"404 Not Found：Unable to show this page","date":"2020-11-11T14:19:19.518Z","updated":"2020-11-11T14:19:19.518Z","comments":false,"path":"/404.html","permalink":"http://qingshuixifan.github.io/404.html","excerpt":"","text":""},{"title":"Book list","date":"2020-11-11T06:17:29.806Z","updated":"2020-11-11T06:17:29.806Z","comments":false,"path":"books/index.html","permalink":"http://qingshuixifan.github.io/books/index.html","excerpt":"","text":""},{"title":"About","date":"2020-12-27T03:06:44.883Z","updated":"2020-12-27T03:06:44.883Z","comments":false,"path":"about/index.html","permalink":"http://qingshuixifan.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2020-11-11T06:30:16.779Z","updated":"2020-11-11T06:30:16.779Z","comments":false,"path":"categories/index.html","permalink":"http://qingshuixifan.github.io/categories/index.html","excerpt":"","text":""},{"title":"Friend Links","date":"2020-11-12T03:03:12.312Z","updated":"2020-11-12T03:03:12.312Z","comments":true,"path":"links/index.html","permalink":"http://qingshuixifan.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-11-11T06:15:21.636Z","updated":"2019-08-02T02:17:12.000Z","comments":false,"path":"repository/index.html","permalink":"http://qingshuixifan.github.io/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-11-11T13:54:02.499Z","updated":"2020-11-11T13:54:02.499Z","comments":false,"path":"tags/index.html","permalink":"http://qingshuixifan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【Books】C++ Primer Plus 电子版PDF带书签","slug":"【Books】C++ Primer Plus pdf下载","date":"2021-02-03T05:23:02.587Z","updated":"2022-05-01T14:59:25.491Z","comments":true,"path":"2021/02/03/【Books】C++ Primer Plus pdf下载/","link":"","permalink":"http://qingshuixifan.github.io/2021/02/03/%E3%80%90Books%E3%80%91C++%20Primer%20Plus%20pdf%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"中文版： 下载链接: https://pan.baidu.com/s/1tTq90XRRKXmDddyoYpuEgA 提取码: 1pz4 英文版： 下载链接: https://pan.baidu.com/s/1VtKcQvYh9YLnUbXr-17FSw 提取码: 3fku","categories":[{"name":"Books","slug":"Books","permalink":"http://qingshuixifan.github.io/categories/Books/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://qingshuixifan.github.io/tags/C/"},{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"}]},{"title":"【Games】Red Dead:Redemption——荒野大镖客2（持续更新中）","slug":"【Games】荒野大镖客2","date":"2021-02-02T06:17:23.031Z","updated":"2021-02-13T08:46:26.502Z","comments":true,"path":"2021/02/02/【Games】荒野大镖客2/","link":"","permalink":"http://qingshuixifan.github.io/2021/02/02/%E3%80%90Games%E3%80%91%E8%8D%92%E9%87%8E%E5%A4%A7%E9%95%96%E5%AE%A22/","excerpt":"","text":"游戏简介[1]《荒野大镖客：救赎2》（英语：Red Dead Redemption 2，港台译作“碧血狂杀2”）是一部修正主义西部片风格的动作冒险游戏。此游戏由Rockstar Games制作与发行，2018年10月26日于PlayStation 4和Xbox One平台发布、2019年11月5日在Microsoft Windows平台发布、11月19日发布Stadia版本。 本作是荒野大镖客系列第三部作品，也是2010年游戏《荒野大镖客：救赎》的前传。游戏剧情设定在1899年虚构化的美国西部、中西部和南部，玩家扮演一名土匪帮派范特林帮（Van Der Linde）的成员亚瑟‧摩根（Arthur Morgan）。亚瑟必须面对美国旧西部时代慢慢终结的现实，并在政府力量与其他帮派等挑战下努力生存。剧情也跟随另一名帮派成员约翰·马斯顿－前作《荒野大镖客：救赎》的主角。 游戏可以第一人称和第三人称视角游玩。玩家可以自由探索开放世界并与其互动。游戏内容包括枪战、狩猎、骑马、非玩家角色任务等，并具有道德值系统。游戏设有一种“赏金”，会随着主角犯罪而逐渐增加。与《侠盗猎车手系列》系列的追击星数相似的是，赏金会吸引警察和赏金猎人前来试图抓捕主角。游戏另有名为《Red Dead Online》的在线多人游戏模式，于2018年底释出测试版，并于2019年5月正式上线。 《荒野大镖客：救赎2》发售前广受宣传与期待，所以发售后随即打破多项业界纪录。在发售的当个周末，《荒野 大镖客：救赎2》即售出超过2500万套，收益超过7.25亿美元。评论界对本作评价非常高，普遍赞扬其故事情节、角色设定、开放世界和精密细节。本作获得多个满分评价和奖项，包括2018年金摇杆奖和2018年游戏大奖的“最佳剧情”和“最佳音乐”项目。 场所和NPC介绍帮派营地帮派营地会根据游戏流程更换位置，分别是雪山犁刀村、马掌望台、罗兹西边烙铁湖边、圣丹尼南莱莫恩掠夺者的营地、格拉斯附近的藏身处、河狸岩洞窟。马展望台和烙铁湖边的营地还是挺不错的，风景优美，而且剧情也没那么虐心。建议玩家不要过快地推进剧情，先把支线任务都做了（比如给帮派成员找回物品、抢劫农庄等）。否则，在搬家后有些支线任务就没了，影响成就的达成。 帮派营地的构成[3]营地总共有三驾补给马车，不同的马车能够补给不同的物资。通过在第二章中，接受施特劳斯的支线任务“放债于更多罪孽”后，完成一次任务后即可解锁账本。在账本中选择补充物资，即可依次解锁。 药品物资：施特劳斯的马车里存放着营地的医疗物资。可以从这里领取药品补给，升级后可以增加药品种类和数量。药品用完之后需要到账本上重新补充。 补给品：皮尔逊的马车里存放着营地的食品物资。可以从这里领取食物补给，升级后可以增加补给种类和数量。补给用完后需要到账本上重新补充。 弹药：亚瑟的住处存放着营地的弹药物资。可以从这里领取弹药补给，升级后可以增加弹药种类和数量。弹药用完后需要到账本上重新补充。 食物：可以从这里免费获取炖汤和咖啡，炖汤可以恢复你的生命核心值，咖啡可以恢复你的死神之眼核心值。每天只能免费获取一次，会在每天下午12点刷新。 肉铺：皮尔逊作为营地里的屠夫和皮革师傅，能够帮你处理任何捕获的猎物。你可以在这里捐献打猎获得的肉和皮毛来增加营地捐款，给皮尔森带来合适的素材来制作升级营地装饰和亚瑟的背包。 小游戏：你可以跟营地里不同的NPC进行一系列小游戏，例如刀尖戳手指、多米诺骨牌和德州扑克。 捐助营地：达奇放置供营地成员捐献公共基金的箱子。升级和补给营地设施的资金来源，可以自定义捐献的金额。（没必要捐太多，够升级营地和保证自己的食物药物弹药补给就行） 亚瑟的帐篷：这里你可以让亚瑟睡觉，换衣服和刮胡子，也可以看着地图快速移动。(地图上的图标名称会根据营地位置的改变而改变) 如何升级营地[3]账本是你用来升级营地和主角设施的唯一途径，你可以通过账本来升级补给马车和添置新的营地设施（当然要先捐款给帮派公共基金箱）。购买特别版和终极版的玩家，升级设施和补充物品时有8折折扣。 随机事件乱伦兄妹以亚瑟(Arthur)的身份去阿伯丁养猪场，位置如下图。 这里接受邀请则触发剧情，然后接受饮料(如果是第二次访问，则接受食物)，然后回到房子，杀死他们两个，钱会直接放在前门的“妈妈”画后面。 这里建议不要找回钱，而是留给约翰以后拿，这是亚瑟把钱留给约翰的唯一方法 狩猎打猎系统是大表哥2非常吸引人的特色，玩家可以通过死眼追踪动物的行迹，再用合适的方法猎杀。猎杀动物得到的物品也很有用——皮毛可以做背包、服饰、升级营地，动物肉可以烹饪食物或者捐给营地补给做肉汤，一些特殊动物部位也可以制作武器（比如飞羽做改良箭、脂肪做分裂子弹）。 其中，“东部传说”背包作为四次元空间物品，它使所有背包物品携带上限涨到99件，敛财必备，必须要各种完美皮毛才能制作。因此，非常建议在第四章前根据物品清单把各种完美皮毛打到手，把“东部传说”背包先拿到，在游戏中后期很有用。 一般来说，我们只需要完美品质的动物皮毛。所以在确定猎物之前，我们可以先看一看动物的品质（瞄准镜或望远镜观察），只挑三星的动物。没有必要大开杀戒，毕竟人与自然要和谐相处不是嘛😄。 建议首先打传说公鹿，传说公鹿角在黑市做的饰品可以提升皮毛品质，对需要完美皮毛的制作很有用。 武器选择除了霰弹枪外（会损伤皮毛品质），几乎所有武器都可以拿来打猎，这里是我推荐使用的武器： 中大型猎物：春田步枪/拉栓式步枪+高速弹，开死眼打头 小型猎物：捕猎步枪，全身 还有一个比较特殊的打猎方法，只针对中大型食草动物，也不会损伤皮毛：可以骑马拿绳子套猎物，套中后下马割喉+剥皮，这里建议开死眼套猎物，一抓一个准。 狩猎传说动物[2]《荒野大镖客2》游戏中有16个传说动物，要达到100%完成度需要找到并杀死至少5只传说动物。奖杯“略懂皮毛”和“动物学家”也需要捕杀传说动物。下面为大家带来《荒野大镖客2》全传说动物分布图与具体位置，没找齐的朋友可以参考着去找。 传说动物可掉落传说毛皮，这些毛皮是独一无二的，可以在捕兽人处制作成特殊的服饰。如果你弄丢了传说毛皮，它将自动被运送到捕兽人处，所以这奖励是不会错过的。 无论你如何杀死传说动物，它们总是能掉落传说毛皮。因此，您可以使用死亡之眼模式轻松地用霰弹枪解决它们，而不会影响毛皮质量。 在第2章中，何西阿带你去狩猎传说熊。在进入任务之后，您可以选择退出或继续狩猎它。如果你选择退出，你仍然可以稍后返回来狩猎它。何西阿还为你提供了传说动物地图，但它不完整且不太准确。可以点击下方“相关链接”查询攻略。 如何找到传说动物首先抵达地图上显示的传说动物位置。当你足够接近时，地图上会出现一个传说动物图标。它们看起来像动物的图画，但头上有一个“皇冠”图标。皇冠意味着它是传说级的。进入该区域后，它必须在左上角显示“你已经进入了传说动物领域。通过寻找和检查线索来追捕这只传说动物”，否则传说动物将不会出现： 现在你必须开死眼并在该区域周围寻找黄色的线索。它们位于动物出现区域内的随机位置，因此您可能需要稍微漫游一下该区域。 通常会有3组黄色线索供调查，然后跟踪动物的踪迹。 相关链接 传说动物位置：《荒野大镖客2》全传说动物分布图与具体位置 很好用的互动地图，做全收集任务很有用：https://www.gamersky.com/z/rdr2/map/ 赌徒荒野大镖客2中有四种可以游玩的小游戏，每种小游戏都有简单而不失乐趣的玩法。有些小伙伴可能对这些赌博类型的小游戏不感兴趣，但是想要100%完成度的话是躲不开这些内容的，其中的赌徒挑战里有10项任务。 四种小游戏的位置和技巧如下： 快刀戳指缝： 位置：草莓镇（室外），瓦伦丁（酒馆），范霍恩贸易站（室外），帮派营地 技巧：第一个人是比较简单的，只需要两个按键快速交替按下就能赢；第二个人比较难，一般赢第一个人就可以先退出，再进入游戏，做赌徒挑战够了。 21点： 位置：罗兹（酒馆），范霍恩贸易站（酒馆） 技巧：一般15及以上就可以停了，11可以冲双倍赌注。 多米诺骨牌： 位置：翡翠牧场车站（60点，无通吃），圣丹尼斯（公园，90点，逢五通吃），黑水镇（室外，90点，逢三通吃） 技巧：有无通吃规则的玩法不一样 无通吃规则：尽量跟着对手的一边走，默认对手没有可以放置在其他位置的牌，让对手多抽牌。 有通吃规则：计算现有边牌的点数，每回合尽量都拿分。 德州扑克： 位置：水镇（酒馆），平脖子车站，瓦伦丁（酒馆），帮派营地，风滚草镇（酒馆），圣丹尼斯（酒馆） 技巧：纯运气游戏，全压可以吓唬NPC弃牌。 挑战任务在《荒野大镖客2》中，挑战任务是游戏中的一项重要玩法，也是100%完成度的必要条件。通过完成挑战任务，你可以在捕兽人处获得加强装备，熟悉游戏的玩法。 ps: 我在完成所有剧情后狂刷挑战任务，费了不少事。 相关链接：《荒野大镖客2》全挑战任务完成方式简析 挑战任务怎么做 附录：制作材料清单营地通过狩猎获取完美皮毛和若干完美尸体，捐给厨子皮尔逊，可以升级帮派营地。 背包 物品名称 材料 补剂背包 1*完美的鹿皮，1*完美的公鹿皮，1*完美的麋鹿皮 原料背包 1*完美的鹿皮，1*完美的獾皮，1*完美的松鼠皮 工具背包 1*完美的鹿皮，1*完美的麋鹿皮，1*完美的山狮皮 补给品背包 1*完美的鹿皮，1*完美的野牛皮，1*完美的浣熊皮 材料背包 1*完美的鹿皮，1*完美的野猪皮，1*完美的鬣蜥皮 贵重物背包 1*完美的鹿皮，1*完美的河狸皮，1*完美的兔皮 “东部传说”背包 1*完美的鹿皮，1*完美的美洲狮皮，1*完美的狼皮 黑市 物品名称 材料 渡鸦爪护身符 1*旧的黄铜罗盘：需要完成陌生人任务“初级地质学”(第二章)，这是一个收集任务，需要找到10幅岩石雕画，将这10幅雕画的位置通过邮件发给委托人。2天之后你会收到委托人的邀请，应邀后从委托人的木屋中可以获得旧的黄铜罗盘 鹰爪护符 1*奖励护符：购买豪华版与终极版特典可获得 野牛角护符 1*鲍鱼外壳碎片：在罗兹镇(Rhodes)的房屋中获取。1*银耳环：可以从尸体、房屋或者马匹上搜取。1*传奇野牛角：剥取传奇野牛获得。 野猪牙护符 1*钴蓝硅化木：在开场雪地地区，地图的西北部有一个伊莎贝拉湖，湖的顶端区域的山脚下有一个小洞穴，洞穴中有一辆损坏的推车，钴蓝硅化木就放在推车上面的箱子里。1*金耳环：可以从尸体、房屋或者马匹上搜取。1*传说野猪獠牙：剥取传说野猪获得。 熊爪护身符 1*石英块：需要完成陌生人任务“诚信之试”(第二章)。这是一个包含30块恐龙骨收集任务。从邮局寄一块找到的恐龙骨寄给委托人，1-2天后石英块就会出现在你的邮箱里。1*白银链条手镯：可以从尸体、房屋或者马匹上搜取。1*传说熊爪：剥取传奇灰熊获得。 短吻鳄牙护身符 1*旧式内战手铐：需要完成陌生人任务“抽烟和其他爱好”(第二章)。这是一个包含144张香烟卡收集任务。从邮局寄一套包含12张卡的卡组给委托人，1-2天后旧式内战手铐就会出现在你的邮箱里。1*金手环：可以从尸体、房屋或者马匹上搜取。1*传说短吻鳄牙：剥取传说短吻鳄获得。 其他 1*[对应传说动物的身体部位] 参考文献 Wikipedia - 荒野大镖客：救赎2 《荒野大镖客2》全传说动物分布图与具体位置","categories":[{"name":"Games","slug":"Games","permalink":"http://qingshuixifan.github.io/categories/Games/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"Rockstar Games","slug":"Rockstar-Games","permalink":"http://qingshuixifan.github.io/tags/Rockstar-Games/"},{"name":"Adventure","slug":"Adventure","permalink":"http://qingshuixifan.github.io/tags/Adventure/"}]},{"title":"【Games】Oxygen Not Included（缺氧）（持续更新中）","slug":"【Games】Oxygen Not Included（缺氧）","date":"2021-01-19T03:57:28.518Z","updated":"2021-02-02T06:21:13.175Z","comments":true,"path":"2021/01/19/【Games】Oxygen Not Included（缺氧）/","link":"","permalink":"http://qingshuixifan.github.io/2021/01/19/%E3%80%90Games%E3%80%91Oxygen%20Not%20Included%EF%BC%88%E7%BC%BA%E6%B0%A7%EF%BC%89/","excerpt":"","text":"游戏简介《缺氧》（英语：Oxygen Not Included）是一款透过Steam网络平台发行由Klei Entertainment制作的太空模拟策略游戏，采用2D横版布局，玩家需要管理复制人，让他们挖掘、建立并维护起一个地下的基地，为此，玩家需要水、食物、氧气、适当的调节压力和适宜的温度等条件来维持复制人生存并满足他们的其他需求。[1] 游戏于2017年5月18日登陆Steam，中国区售价58元。2019年7月30日完成最后更新，一般使用者可以随时购买。[1] 新手攻略水管优先级策略 白口串联，灌满再走；绿口串联，空了再走；优先供水用绿口，绿口优先；优先取水用白口，白口滞后。 参考文献 Wikipedia - 缺氧 (游戏)","categories":[{"name":"Games","slug":"Games","permalink":"http://qingshuixifan.github.io/categories/Games/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"klei","slug":"klei","permalink":"http://qingshuixifan.github.io/tags/klei/"},{"name":"Survival","slug":"Survival","permalink":"http://qingshuixifan.github.io/tags/Survival/"},{"name":"Automation","slug":"Automation","permalink":"http://qingshuixifan.github.io/tags/Automation/"}]},{"title":"【Algorithm】Binary Search","slug":"【Algorithm】Binary Search","date":"2020-11-13T10:09:28.961Z","updated":"2020-11-13T10:13:47.432Z","comments":true,"path":"2020/11/13/【Algorithm】Binary Search/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/13/%E3%80%90Algorithm%E3%80%91Binary%20Search/","excerpt":"","text":"Applicable Scenarios Search a certain number in a ** sorted ** array, under some condition. Code Snippets1234567891011121314# Recursivedef bsearch(nums: list, low: int, high: int, value) -&gt; int: &quot;&quot;&quot; 在数组nums的下标low和high之间，查找value，返回下标 &quot;&quot;&quot; if low &gt; high: return -1 middle = low + (high - low) &gt;&gt; 1 if nums[middle] == value: # 找到了 return middle elif nums[middle] &gt; value: return bsearch(nums, low, middle-1, value) # high = middle-1 else: return bsearch(nums, middle+1, high, value) # low = middle+1 12345678910111213# Iterativedef bsearch(nums: List[int], target: int) -&gt; int: left= 0 right=len(nums) - 1 while left &lt;= right: # 区间没有变成1个元素，就查找 middle = left + ((right-left) &gt;&gt; 1) # 计算中间下标 if nums[middle] == target: # 找到了 return middle elif nums[middle] &lt; target: # 中间下标比查找的值小，继续在右边查找 left = middle + 1 else: # 中间下标比查找的值大，继续在左边查找 right = middle - 1 return -1","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/tags/Algorithm/"},{"name":"Binary Search","slug":"Binary-Search","permalink":"http://qingshuixifan.github.io/tags/Binary-Search/"},{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"}]},{"title":"【Git】Git Cheatsheet","slug":"【Git】Git Cheatsheet","date":"2020-11-12T08:07:21.219Z","updated":"2020-11-12T08:23:02.978Z","comments":true,"path":"2020/11/12/【Git】Git Cheatsheet/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/12/%E3%80%90Git%E3%80%91Git%20Cheatsheet/","excerpt":"","text":"","categories":[{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"}],"tags":[{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Git","slug":"Git","permalink":"http://qingshuixifan.github.io/tags/Git/"}]},{"title":"【Data Structure】Union-find data structure","slug":"【Data Structure】Union-find data structure","date":"2020-11-12T08:01:03.264Z","updated":"2020-11-12T08:06:53.792Z","comments":true,"path":"2020/11/12/【Data Structure】Union-find data structure/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/12/%E3%80%90Data%20Structure%E3%80%91Union-find%20data%20structure/","excerpt":"","text":"Definition A disjoint-set data structure (also called union-find data structure) is a data structure that tracks a set of elements partitioned into a number of disjoint (overlapping) subsets. Operations Union: Add new sets/merge existing sets Find: Determine whether elements are in the same set Algorithm The representative element (one without a parent, or whose parent is itself) is used to represent a subset All the elements in a subset compose a tree structure whose root is representative element if an element has a parent, the element is part of whatever set is identified by following the chain of parents upwards until a representative element is reached at the root of the tree If the representative element of the two elements is the same, then they belong to the same subset Code Snippets Initialization Use a struct or class1234567#define MAX 10000struct Node&#123; int data; int rank; int parent;&#125;node[MAX] Use arrays of the same size12345678int set[max]; // the representative element of a subset where the certain element inint rank[max];int data[max];void makeSet(int i)&#123; set[I]=i; rank[i]=0;&#125; Find Function struct or class12345678// find the representative element of a subset recursivelyint find(int x)&#123; // if a node&#x27;s parent is itself, then it is the representative element if(node[x].parent==x) return x; // else recursively find its parent return find(node[x].parent)&#125; array1234567int find(int i)&#123; // if a node&#x27;s parent is itself, then it is the representative element if(set[i]==i) return set[i]; // else recursively find its parent return find(set[i])&#125; Union struct or class1234567891011void union(int a, int b)&#123; a=find(a); b=find(b); if(node[a].rank&gt;node[b].rank) node[b].parent=a; else&#123; node[a].parent=b; if(node[a].rank==node[b].rank) node[b].rank++; &#125;&#125; array1234567891011void union(int I, int j)&#123; I=find(I); j=find(j); if(i==j) return ; if(rank[i]&gt;rank[j]) set[j]=i; else&#123; if(rank[i]==rank[j]) rank[j]++; set[i]=j; &#125;&#125; Related Problems Compute the number of disjoint subsets -&gt; count the number of nodes whose parent is itself, i.e. parent[i]==i Leetcode 990 - Satisfiability of Equality Equations","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/categories/Data-Structure/"}],"tags":[{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/tags/Data-Structure/"},{"name":"Union-find","slug":"Union-find","permalink":"http://qingshuixifan.github.io/tags/Union-find/"}]},{"title":"【Markdown】Typora导出pdf分页的两种方法","slug":"【Markdown】Typora导出pdf分页","date":"2020-11-11T13:54:36.767Z","updated":"2020-11-12T07:44:06.693Z","comments":true,"path":"2020/11/11/【Markdown】Typora导出pdf分页/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/11/%E3%80%90Markdown%E3%80%91Typora%E5%AF%BC%E5%87%BApdf%E5%88%86%E9%A1%B5/","excerpt":"","text":"自动分页符有时您可能需要导出为PDF，并在顶层标题上使用分页符。 打开主题文件夹，然后编辑要包含的主题的css 12345678@media print &#123; h1 &#123; page-break-before: always; &#125; h1:first-of-type &#123; page-break-before: avoid; &#125;&#125; 现在，在导出时，将在每个h1元素（第一个元素除外）之前创建一个新页面。 强制分页符（方便）要在文档上插入分页&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;符，可以在书写时尝试输入HTML 。","categories":[{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"Markdown","slug":"Markdown","permalink":"http://qingshuixifan.github.io/tags/Markdown/"}]},{"title":"【Git】How to clone from GitHub faster in China","slug":"【Git】How to clone from GitHub faster in China","date":"2020-11-11T09:38:33.247Z","updated":"2020-11-12T02:54:28.382Z","comments":true,"path":"2020/11/11/【Git】How to clone from GitHub faster in China/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/11/%E3%80%90Git%E3%80%91How%20to%20clone%20from%20GitHub%20faster%20in%20China/","excerpt":"","text":"Sometimes it’s bloody slow to clone a repository from GitHub in China mainland, so follow the following way to clone the repos from GitHub Chinese mirror site: Steps: Just replace www.github.com with www.github.com.cnpmjs.org, like the following example: 1git clone https://github.com.cnpmjs.org/QingShuiXiFan/mysite.git","categories":[{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"}],"tags":[{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Git","slug":"Git","permalink":"http://qingshuixifan.github.io/tags/Git/"}]}],"categories":[{"name":"Books","slug":"Books","permalink":"http://qingshuixifan.github.io/categories/Books/"},{"name":"Games","slug":"Games","permalink":"http://qingshuixifan.github.io/categories/Games/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/categories/Algorithm/"},{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/categories/Data-Structure/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://qingshuixifan.github.io/tags/C/"},{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"Rockstar Games","slug":"Rockstar-Games","permalink":"http://qingshuixifan.github.io/tags/Rockstar-Games/"},{"name":"Adventure","slug":"Adventure","permalink":"http://qingshuixifan.github.io/tags/Adventure/"},{"name":"klei","slug":"klei","permalink":"http://qingshuixifan.github.io/tags/klei/"},{"name":"Survival","slug":"Survival","permalink":"http://qingshuixifan.github.io/tags/Survival/"},{"name":"Automation","slug":"Automation","permalink":"http://qingshuixifan.github.io/tags/Automation/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/tags/Algorithm/"},{"name":"Binary Search","slug":"Binary-Search","permalink":"http://qingshuixifan.github.io/tags/Binary-Search/"},{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Git","slug":"Git","permalink":"http://qingshuixifan.github.io/tags/Git/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/tags/Data-Structure/"},{"name":"Union-find","slug":"Union-find","permalink":"http://qingshuixifan.github.io/tags/Union-find/"},{"name":"Markdown","slug":"Markdown","permalink":"http://qingshuixifan.github.io/tags/Markdown/"}]}