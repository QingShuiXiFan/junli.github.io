{"meta":{"title":"Jun Li's Blog","subtitle":"","description":"","author":"Jun Li","url":"http://qingshuixifan.github.io","root":"/"},"pages":[{"title":"Categories","date":"2020-11-11T06:30:16.779Z","updated":"2020-11-11T06:30:16.779Z","comments":false,"path":"categories/index.html","permalink":"http://qingshuixifan.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：Unable to show this page","date":"2020-11-11T14:19:19.518Z","updated":"2020-11-11T14:19:19.518Z","comments":false,"path":"/404.html","permalink":"http://qingshuixifan.github.io/404.html","excerpt":"","text":""},{"title":"Friend Links","date":"2020-11-12T03:03:12.312Z","updated":"2020-11-12T03:03:12.312Z","comments":true,"path":"links/index.html","permalink":"http://qingshuixifan.github.io/links/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-11-11T13:54:02.499Z","updated":"2020-11-11T13:54:02.499Z","comments":false,"path":"tags/index.html","permalink":"http://qingshuixifan.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-11-11T06:15:21.636Z","updated":"2019-08-02T02:17:12.000Z","comments":false,"path":"repository/index.html","permalink":"http://qingshuixifan.github.io/repository/index.html","excerpt":"","text":""},{"title":"Book list","date":"2020-11-11T06:17:29.806Z","updated":"2020-11-11T06:17:29.806Z","comments":false,"path":"books/index.html","permalink":"http://qingshuixifan.github.io/books/index.html","excerpt":"","text":""},{"title":"About","date":"2020-12-27T03:06:44.883Z","updated":"2020-12-27T03:06:44.883Z","comments":false,"path":"about/index.html","permalink":"http://qingshuixifan.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"【Books】C++ Primer Plus 电子版PDF带书签","slug":"【Books】C++ Primer Plus pdf下载","date":"2021-02-03T05:23:02.587Z","updated":"2021-02-03T05:27:21.568Z","comments":true,"path":"2021/02/03/【Books】C++ Primer Plus pdf下载/","link":"","permalink":"http://qingshuixifan.github.io/2021/02/03/%E3%80%90Books%E3%80%91C++%20Primer%20Plus%20pdf%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"下载链接: https://pan.baidu.com/s/1tTq90XRRKXmDddyoYpuEgA 提取码: 1pz4","categories":[{"name":"Books","slug":"Books","permalink":"http://qingshuixifan.github.io/categories/Books/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"C++","slug":"C","permalink":"http://qingshuixifan.github.io/tags/C/"}]},{"title":"【Games】Red Dead:Redemption——荒野大镖客2（持续更新中）","slug":"【Games】荒野大镖客2","date":"2021-02-02T06:17:23.031Z","updated":"2021-02-02T08:57:17.468Z","comments":true,"path":"2021/02/02/【Games】荒野大镖客2/","link":"","permalink":"http://qingshuixifan.github.io/2021/02/02/%E3%80%90Games%E3%80%91%E8%8D%92%E9%87%8E%E5%A4%A7%E9%95%96%E5%AE%A22/","excerpt":"","text":"游戏简介[1]《荒野大镖客：救赎2》（英语：Red Dead Redemption 2，港台译作“碧血狂杀2”）是一部修正主义西部片风格的动作冒险游戏。此游戏由Rockstar Games制作与发行，2018年10月26日于PlayStation 4和Xbox One平台发布、2019年11月5日在Microsoft Windows平台发布、11月19日发布Stadia版本。 本作是荒野大镖客系列第三部作品，也是2010年游戏《荒野大镖客：救赎》的前传。游戏剧情设定在1899年虚构化的美国西部、中西部和南部，玩家扮演一名土匪帮派范特林帮（Van Der Linde）的成员亚瑟‧摩根（Arthur Morgan）。亚瑟必须面对美国旧西部时代慢慢终结的现实，并在政府力量与其他帮派等挑战下努力生存。剧情也跟随另一名帮派成员约翰·马斯顿－前作《荒野大镖客：救赎》的主角。 游戏可以第一人称和第三人称视角游玩。玩家可以自由探索开放世界并与其互动。游戏内容包括枪战、狩猎、骑马、非玩家角色任务等，并具有道德值系统。游戏设有一种“赏金”，会随着主角犯罪而逐渐增加。与《侠盗猎车手系列》系列的追击星数相似的是，赏金会吸引警察和赏金猎人前来试图抓捕主角。游戏另有名为《Red Dead Online》的在线多人游戏模式，于2018年底释出测试版，并于2019年5月正式上线。 《荒野大镖客：救赎2》发售前广受宣传与期待，所以发售后随即打破多项业界纪录。在发售的当个周末，《荒野 大镖客：救赎2》即售出超过2500万套，收益超过7.25亿美元。评论界对本作评价非常高，普遍赞扬其故事情节、角色设定、开放世界和精密细节。本作获得多个满分评价和奖项，包括2018年金摇杆奖和2018年游戏大奖的“最佳剧情”和“最佳音乐”项目。 狩猎打猎系统是大表哥2非常吸引人的特色，玩家可以通过死眼追踪动物的行迹，再用合适的方法猎杀。猎杀动物得到的物品也很有用——皮毛可以做背包、服饰、升级营地，动物肉可以烹饪食物或者捐给营地补给做肉汤，一些特殊动物部位也可以制作武器（比如飞羽做改良箭、脂肪做分裂子弹）。 其中，“东部传说”背包作为四次元空间物品，它使所有背包物品携带上限涨到99件，敛财必备，必须要各种完美皮毛才能制作。因此，非常建议在第四章前根据物品清单把各种完美皮毛打到手，把“东部传说”背包先拿到，在游戏中后期很有用。 一般来说，我们只需要完美品质的动物皮毛。所以在确定猎物之前，我们可以先看一看动物的品质（瞄准镜或望远镜观察），只挑三星的动物。没有必要大开杀戒，毕竟人与自然要和谐相处不是嘛😄。 建议首先打传说公鹿，传说公鹿角在黑市做的饰品可以提升皮毛品质，对需要完美皮毛的制作很有用。 武器选择除了霰弹枪外（会损伤皮毛品质），几乎所有武器都可以拿来打猎，这里是我推荐使用的武器： 中大型猎物：春田步枪/拉栓式步枪+高速弹，开死眼打头 小型猎物：捕猎步枪，全身 还有一个比较特殊的打猎方法，只针对中大型食草动物，也不会损伤皮毛：可以骑马拿绳子套猎物，套中后下马割喉+剥皮，这里建议开死眼套猎物，一抓一个准。 狩猎传说动物附录：制作材料清单营地背包 物品名称 材料 补剂背包 1*完美的鹿皮，1*完美的公鹿皮，1*完美的麋鹿皮 原料背包 1*完美的鹿皮，1*完美的獾皮，1*完美的松鼠皮 工具背包 1*完美的鹿皮，1*完美的麋鹿皮，1*完美的山狮皮 补给品背包 1*完美的鹿皮，1*完美的野牛皮，1*完美的浣熊皮 材料背包 1*完美的鹿皮，1*完美的野猪皮，1*完美的鬣蜥皮 贵重物背包 1*完美的鹿皮，1*完美的河狸皮，1*完美的兔皮 “东部传说”背包 1*完美的鹿皮，1*完美的美洲狮皮，1*完美的狼皮 黑市 物品名称 材料 渡鸦爪护身符 1*旧的黄铜罗盘：需要完成陌生人任务“初级地质学”(第二章)，这是一个收集任务，需要找到10幅岩石雕画，将这10幅雕画的位置通过邮件发给委托人。2天之后你会收到委托人的邀请，应邀后从委托人的木屋中可以获得旧的黄铜罗盘 鹰爪护符 1*奖励护符：购买豪华版与终极版特典可获得 野牛角护符 1*鲍鱼外壳碎片：在罗兹镇(Rhodes)的房屋中获取。1*银耳环：可以从尸体、房屋或者马匹上搜取。1*传奇野牛角：剥取传奇野牛获得。 野猪牙护符 1*钴蓝硅化木：在开场雪地地区，地图的西北部有一个伊莎贝拉湖，湖的顶端区域的山脚下有一个小洞穴，洞穴中有一辆损坏的推车，钴蓝硅化木就放在推车上面的箱子里。1*金耳环：可以从尸体、房屋或者马匹上搜取。1*传说野猪獠牙：剥取传说野猪获得。 熊爪护身符 1*石英块：需要完成陌生人任务“诚信之试”(第二章)。这是一个包含30块恐龙骨收集任务。从邮局寄一块找到的恐龙骨寄给委托人，1-2天后石英块就会出现在你的邮箱里。1*白银链条手镯：可以从尸体、房屋或者马匹上搜取。1*传说熊爪：剥取传奇灰熊获得。 短吻鳄牙护身符 1*旧式内战手铐：需要完成陌生人任务“抽烟和其他爱好”(第二章)。这是一个包含144张香烟卡收集任务。从邮局寄一套包含12张卡的卡组给委托人，1-2天后旧式内战手铐就会出现在你的邮箱里。1*金手环：可以从尸体、房屋或者马匹上搜取。1*传说短吻鳄牙：剥取传说短吻鳄获得。 其他 1*[对应传说动物的身体部位] 参考文献 Wikipedia - 荒野大镖客：救赎2","categories":[{"name":"Games","slug":"Games","permalink":"http://qingshuixifan.github.io/categories/Games/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"Rockstar Games","slug":"Rockstar-Games","permalink":"http://qingshuixifan.github.io/tags/Rockstar-Games/"},{"name":"Adventure","slug":"Adventure","permalink":"http://qingshuixifan.github.io/tags/Adventure/"}]},{"title":"【Games】Oxygen Not Included（缺氧）（持续更新中）","slug":"【Games】Oxygen Not Included（缺氧）","date":"2021-01-19T03:57:28.518Z","updated":"2021-02-02T06:21:13.175Z","comments":true,"path":"2021/01/19/【Games】Oxygen Not Included（缺氧）/","link":"","permalink":"http://qingshuixifan.github.io/2021/01/19/%E3%80%90Games%E3%80%91Oxygen%20Not%20Included%EF%BC%88%E7%BC%BA%E6%B0%A7%EF%BC%89/","excerpt":"","text":"游戏简介《缺氧》（英语：Oxygen Not Included）是一款透过Steam网络平台发行由Klei Entertainment制作的太空模拟策略游戏，采用2D横版布局，玩家需要管理复制人，让他们挖掘、建立并维护起一个地下的基地，为此，玩家需要水、食物、氧气、适当的调节压力和适宜的温度等条件来维持复制人生存并满足他们的其他需求。[1] 游戏于2017年5月18日登陆Steam，中国区售价58元。2019年7月30日完成最后更新，一般使用者可以随时购买。[1] 新手攻略水管优先级策略 白口串联，灌满再走；绿口串联，空了再走；优先供水用绿口，绿口优先；优先取水用白口，白口滞后。 参考文献 Wikipedia - 缺氧 (游戏)","categories":[{"name":"Games","slug":"Games","permalink":"http://qingshuixifan.github.io/categories/Games/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"klei","slug":"klei","permalink":"http://qingshuixifan.github.io/tags/klei/"},{"name":"Survival","slug":"Survival","permalink":"http://qingshuixifan.github.io/tags/Survival/"},{"name":"Automation","slug":"Automation","permalink":"http://qingshuixifan.github.io/tags/Automation/"}]},{"title":"【Algorithm】Binary Search","slug":"【Algorithm】Binary Search","date":"2020-11-13T10:09:28.961Z","updated":"2020-11-13T10:13:47.432Z","comments":true,"path":"2020/11/13/【Algorithm】Binary Search/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/13/%E3%80%90Algorithm%E3%80%91Binary%20Search/","excerpt":"","text":"Applicable Scenarios Search a certain number in a ** sorted ** array, under some condition. Code Snippets1234567891011121314# Recursivedef bsearch(nums: list, low: int, high: int, value) -&gt; int: &quot;&quot;&quot; 在数组nums的下标low和high之间，查找value，返回下标 &quot;&quot;&quot; if low &gt; high: return -1 middle = low + (high - low) &gt;&gt; 1 if nums[middle] == value: # 找到了 return middle elif nums[middle] &gt; value: return bsearch(nums, low, middle-1, value) # high = middle-1 else: return bsearch(nums, middle+1, high, value) # low = middle+1 12345678910111213# Iterativedef bsearch(nums: List[int], target: int) -&gt; int: left= 0 right=len(nums) - 1 while left &lt;= right: # 区间没有变成1个元素，就查找 middle = left + ((right-left) &gt;&gt; 1) # 计算中间下标 if nums[middle] == target: # 找到了 return middle elif nums[middle] &lt; target: # 中间下标比查找的值小，继续在右边查找 left = middle + 1 else: # 中间下标比查找的值大，继续在左边查找 right = middle - 1 return -1","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/tags/Algorithm/"},{"name":"Binary Search","slug":"Binary-Search","permalink":"http://qingshuixifan.github.io/tags/Binary-Search/"},{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"}]},{"title":"【Git】Git Cheatsheet","slug":"【Git】Git Cheatsheet","date":"2020-11-12T08:07:21.219Z","updated":"2020-11-12T08:23:02.978Z","comments":true,"path":"2020/11/12/【Git】Git Cheatsheet/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/12/%E3%80%90Git%E3%80%91Git%20Cheatsheet/","excerpt":"","text":"","categories":[{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"}],"tags":[{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Git","slug":"Git","permalink":"http://qingshuixifan.github.io/tags/Git/"}]},{"title":"【Data Structure】Union-find data structure","slug":"【Data Structure】Union-find data structure","date":"2020-11-12T08:01:03.264Z","updated":"2020-11-12T08:06:53.792Z","comments":true,"path":"2020/11/12/【Data Structure】Union-find data structure/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/12/%E3%80%90Data%20Structure%E3%80%91Union-find%20data%20structure/","excerpt":"","text":"Definition A disjoint-set data structure (also called union-find data structure) is a data structure that tracks a set of elements partitioned into a number of disjoint (overlapping) subsets. Operations Union: Add new sets/merge existing sets Find: Determine whether elements are in the same set Algorithm The representative element (one without a parent, or whose parent is itself) is used to represent a subset All the elements in a subset compose a tree structure whose root is representative element if an element has a parent, the element is part of whatever set is identified by following the chain of parents upwards until a representative element is reached at the root of the tree If the representative element of the two elements is the same, then they belong to the same subset Code Snippets Initialization Use a struct or class1234567#define MAX 10000struct Node&#123; int data; int rank; int parent;&#125;node[MAX] Use arrays of the same size12345678int set[max]; // the representative element of a subset where the certain element inint rank[max];int data[max];void makeSet(int i)&#123; set[I]=i; rank[i]=0;&#125; Find Function struct or class12345678// find the representative element of a subset recursivelyint find(int x)&#123; // if a node&#x27;s parent is itself, then it is the representative element if(node[x].parent==x) return x; // else recursively find its parent return find(node[x].parent)&#125; array1234567int find(int i)&#123; // if a node&#x27;s parent is itself, then it is the representative element if(set[i]==i) return set[i]; // else recursively find its parent return find(set[i])&#125; Union struct or class1234567891011void union(int a, int b)&#123; a=find(a); b=find(b); if(node[a].rank&gt;node[b].rank) node[b].parent=a; else&#123; node[a].parent=b; if(node[a].rank==node[b].rank) node[b].rank++; &#125;&#125; array1234567891011void union(int I, int j)&#123; I=find(I); j=find(j); if(i==j) return ; if(rank[i]&gt;rank[j]) set[j]=i; else&#123; if(rank[i]==rank[j]) rank[j]++; set[i]=j; &#125;&#125; Related Problems Compute the number of disjoint subsets -&gt; count the number of nodes whose parent is itself, i.e. parent[i]==i Leetcode 990 - Satisfiability of Equality Equations","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/categories/Data-Structure/"}],"tags":[{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/tags/Data-Structure/"},{"name":"Union-find","slug":"Union-find","permalink":"http://qingshuixifan.github.io/tags/Union-find/"}]},{"title":"【Markdown】Typora导出pdf分页的两种方法","slug":"【Markdown】Typora导出pdf分页","date":"2020-11-11T13:54:36.767Z","updated":"2020-11-12T07:44:06.693Z","comments":true,"path":"2020/11/11/【Markdown】Typora导出pdf分页/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/11/%E3%80%90Markdown%E3%80%91Typora%E5%AF%BC%E5%87%BApdf%E5%88%86%E9%A1%B5/","excerpt":"","text":"自动分页符有时您可能需要导出为PDF，并在顶层标题上使用分页符。 打开主题文件夹，然后编辑要包含的主题的css 12345678@media print &#123; h1 &#123; page-break-before: always; &#125; h1:first-of-type &#123; page-break-before: avoid; &#125;&#125; 现在，在导出时，将在每个h1元素（第一个元素除外）之前创建一个新页面。 强制分页符（方便）要在文档上插入分页&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;符，可以在书写时尝试输入HTML 。","categories":[{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://qingshuixifan.github.io/tags/Markdown/"},{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"}]},{"title":"【Git】How to clone from GitHub faster in China","slug":"【Git】How to clone from GitHub faster in China","date":"2020-11-11T09:38:33.247Z","updated":"2020-11-12T02:54:28.382Z","comments":true,"path":"2020/11/11/【Git】How to clone from GitHub faster in China/","link":"","permalink":"http://qingshuixifan.github.io/2020/11/11/%E3%80%90Git%E3%80%91How%20to%20clone%20from%20GitHub%20faster%20in%20China/","excerpt":"","text":"Sometimes it’s bloody slow to clone a repository from GitHub in China mainland, so follow the following way to clone the repos from GitHub Chinese mirror site: Steps: Just replace www.github.com with www.github.com.cnpmjs.org, like the following example: 1git clone https://github.com.cnpmjs.org/QingShuiXiFan/mysite.git","categories":[{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"}],"tags":[{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Git","slug":"Git","permalink":"http://qingshuixifan.github.io/tags/Git/"}]}],"categories":[{"name":"Books","slug":"Books","permalink":"http://qingshuixifan.github.io/categories/Books/"},{"name":"Games","slug":"Games","permalink":"http://qingshuixifan.github.io/categories/Games/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/categories/Algorithm/"},{"name":"IT","slug":"IT","permalink":"http://qingshuixifan.github.io/categories/IT/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/categories/Data-Structure/"}],"tags":[{"name":"CN","slug":"CN","permalink":"http://qingshuixifan.github.io/tags/CN/"},{"name":"C++","slug":"C","permalink":"http://qingshuixifan.github.io/tags/C/"},{"name":"Rockstar Games","slug":"Rockstar-Games","permalink":"http://qingshuixifan.github.io/tags/Rockstar-Games/"},{"name":"Adventure","slug":"Adventure","permalink":"http://qingshuixifan.github.io/tags/Adventure/"},{"name":"klei","slug":"klei","permalink":"http://qingshuixifan.github.io/tags/klei/"},{"name":"Survival","slug":"Survival","permalink":"http://qingshuixifan.github.io/tags/Survival/"},{"name":"Automation","slug":"Automation","permalink":"http://qingshuixifan.github.io/tags/Automation/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://qingshuixifan.github.io/tags/Algorithm/"},{"name":"Binary Search","slug":"Binary-Search","permalink":"http://qingshuixifan.github.io/tags/Binary-Search/"},{"name":"EN","slug":"EN","permalink":"http://qingshuixifan.github.io/tags/EN/"},{"name":"Git","slug":"Git","permalink":"http://qingshuixifan.github.io/tags/Git/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://qingshuixifan.github.io/tags/Data-Structure/"},{"name":"Union-find","slug":"Union-find","permalink":"http://qingshuixifan.github.io/tags/Union-find/"},{"name":"Markdown","slug":"Markdown","permalink":"http://qingshuixifan.github.io/tags/Markdown/"}]}